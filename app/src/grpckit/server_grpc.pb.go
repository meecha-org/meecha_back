// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: server.proto

package grpckit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthBaseService_SearchUser_FullMethodName = "/grpckit.AuthBaseService/SearchUser"
	AuthBaseService_GetUser_FullMethodName    = "/grpckit.AuthBaseService/GetUser"
	AuthBaseService_GetLabel_FullMethodName   = "/grpckit.AuthBaseService/GetLabel"
)

// AuthBaseServiceClient is the client API for AuthBaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthBaseServiceClient interface {
	SearchUser(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResult, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	GetLabel(ctx context.Context, in *GetLabelRequest, opts ...grpc.CallOption) (*Label, error)
}

type authBaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthBaseServiceClient(cc grpc.ClientConnInterface) AuthBaseServiceClient {
	return &authBaseServiceClient{cc}
}

func (c *authBaseServiceClient) SearchUser(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResult)
	err := c.cc.Invoke(ctx, AuthBaseService_SearchUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authBaseServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, AuthBaseService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authBaseServiceClient) GetLabel(ctx context.Context, in *GetLabelRequest, opts ...grpc.CallOption) (*Label, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Label)
	err := c.cc.Invoke(ctx, AuthBaseService_GetLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthBaseServiceServer is the server API for AuthBaseService service.
// All implementations should embed UnimplementedAuthBaseServiceServer
// for forward compatibility.
type AuthBaseServiceServer interface {
	SearchUser(context.Context, *SearchRequest) (*SearchResult, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
	GetLabel(context.Context, *GetLabelRequest) (*Label, error)
}

// UnimplementedAuthBaseServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthBaseServiceServer struct{}

func (UnimplementedAuthBaseServiceServer) SearchUser(context.Context, *SearchRequest) (*SearchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedAuthBaseServiceServer) GetUser(context.Context, *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuthBaseServiceServer) GetLabel(context.Context, *GetLabelRequest) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabel not implemented")
}
func (UnimplementedAuthBaseServiceServer) testEmbeddedByValue() {}

// UnsafeAuthBaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthBaseServiceServer will
// result in compilation errors.
type UnsafeAuthBaseServiceServer interface {
	mustEmbedUnimplementedAuthBaseServiceServer()
}

func RegisterAuthBaseServiceServer(s grpc.ServiceRegistrar, srv AuthBaseServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthBaseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthBaseService_ServiceDesc, srv)
}

func _AuthBaseService_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthBaseServiceServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthBaseService_SearchUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthBaseServiceServer).SearchUser(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthBaseService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthBaseServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthBaseService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthBaseServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthBaseService_GetLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthBaseServiceServer).GetLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthBaseService_GetLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthBaseServiceServer).GetLabel(ctx, req.(*GetLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthBaseService_ServiceDesc is the grpc.ServiceDesc for AuthBaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthBaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpckit.AuthBaseService",
	HandlerType: (*AuthBaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchUser",
			Handler:    _AuthBaseService_SearchUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AuthBaseService_GetUser_Handler,
		},
		{
			MethodName: "GetLabel",
			Handler:    _AuthBaseService_GetLabel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
